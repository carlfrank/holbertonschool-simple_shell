BLOG


Unveiling the Secrets of Your Computer's Brain: How Commands Work
Ever wondered how your computer actually understands and follows the commands you type? Let's take a super simple journey through the steps that make things happen when you type ls -l *.c and press Enter in your computer's command box. We'll keep it as easy as counting to three!
Step 1: Talking to Your Computer
Imagine your computer is like a robot friend that listens to your words but only understands its own special language – the command language. You say, "Hey robot, show me a list of .c files in a special way!
Step 2: Robot Translates Your Words
Your robot friend is smart. It knows that ls means "list stuff," and -l means "give me details." The *.c part excites it because it means "find files ending in .c."
Step 3: Robot Gets to Work
Your robot buddy knows where to find special tools, just like you know where your toys are. It grabs the "list stuff" tool (called ls) and starts using it.
Step 4: Robot Explores
The ls tool looks at all the things (files) in the room (folder). When it finds things that end with .c
Step 5: Robot's Detective Skills
For each .c thing, the ls tool checks its ID card (technical details). It's like the tool is a detective, investigating each thing.
Step 6: Robot Shows You
With all the detective work done, the ls tool draws a nice picture of the things with their details on your special paper (the screen).
Step 7: Robot Waves Goodbye
The ls tool finishes and goes back to its toolbox. Your robot friend is back.
Step 8: Magic Happened!
And just like that, you asked your robot friend to find .c things, and it showed you a cool list with details. 
Conclusion
See, it's like having a secret code with your computer you say something, and it responds with magic tricks! Every command you give is like a new adventure for your computer buddy. So next time you tell it to do something, remember that it's just following your special language.




—---------------------------------------------------------------------------------------------

MAIN_H

“Simple.h”

#ifndef SIMPLE_SHELL_H
#define SIMPLE_SHELL_H


#include <stdlib.h>
#include <stdio.h>
#include <fcntl.h>
#include <unistd.h>
#include <string.h>
#include <stdarg.h>
#include <sys/types.h>
#include <dirent.h>
#include <signal.h>
#include <sys/wait.h>
#include <sys/stat.h>
#include <stdbool.h>


void execute_command(char *command, char environment);
void prompt(void);
char *read_input(void);
char **tokenize(char *line);
void free_array(char **array);
int main(int argc, char argv, char *env);
void handle_non_interactive_mode(char *environment);
void free_array(char **array);
char get_paths(void);


#endif







MAIN_C

“Main.c”

include "simple_shell.h"


/*
main - Entry point for the simple shell program
@argc: The argument count (unused)
@argv: The argument vector (unused)
@env: The environment variables
Return: Always 0 */


int main(int argc, char **argv, char *env)
{
   // Declare a pointer to hold user input and allocate memory for it
   charline = NULL;
   // Initialize the initial length of user input
   size_t len = 0;
   // Variable to store the number of characters read from input
   ssize_t read;


   // Check if the shell is in non-interactive mode (e.g., script input)
   int non_interactive_mode = isatty(STDIN_FILENO) == 0;


   // If in non-interactive mode (e.g., running a script)
   if (non_interactive_mode)
   {
       // Handle non-interactive mode logic
       handle_non_interactive_mode(env);
   }
   // If in interactive mode (user is entering commands)
   else
   {
       // Continue looping until manually broken
       while (1)
       {
           // Display a simple shell prompt
           printf("$ ");
           // Read user input and store the number of characters read
           read = getline(&line, &len, stdin);


           // If reaching the end of input (-1 indicates end of file or error)
           if (read == -1)
               break;


           // Remove trailing newline character, if present
           size_t input_length = strlen(line);
           if (input_length > 0 && line[input_length - 1] == '\n')
               line[input_length - 1] = '\0';


           // Check if user wants to exit the shell
           if (strcmp(line, "exit") == 0)
               break;
// Skip processing if the input is empty or contains only spaces
           if (input_length == 0 || isspace((unsigned char)line[0]))
               continue;


           // Execute the command entered by the user
           execute_command(line, env);
       }


       // Free the allocated memory for user input
       free(line);
   }


   // Return 0 to indicate successful execution of the program
   return 0;
}












EXECUTE_C

“Execute.c”

#include "simple_shell.h"


/*
execute_command - Execute a command using fork and execve
@command: The command to execute
@environment: The environment variables


*/
void execute_command(char *command, char environment)
{
   pid_t child_pid;
   char token = NULL;
   chararguments[100]; // Maximum number of arguments
   int arg_count = 0;


   // Tokenize the command string into arguments
   token = strtok(command, " \n");


   // Return if no tokens found
   if (token == NULL)
       return;


   // Tokenize the command and store arguments
   while (token != NULL && arg_count < 99)
   {
       arguments[arg_count] = token;
       arg_count++;
       token = strtok(NULL, " \n");
   }


   arguments[arg_count] = NULL; // Set the last element to NULL


   // Create a child process
   child_pid = fork();


   // Handle fork error
   if (child_pid == -1)
   {
       perror("fork");
       return;
   }


   // Child process
   if (child_pid == 0)
   {
       execve(arguments[0], arguments, environment);
       perror("error ");
       exit(EXIT_FAILURE);
   }
   // Parent process
   else
   {
       wait(NULL);
   }
}



PATH_C

“Path.c”

#include "simple_shell.h"


/*
get_paths - Extracts paths from the PATH environment variable
Return: A pointer to an array of strings containing the paths
NULL on failure or if PATH is not found
*/


char get_paths(void)
{
   // Get the value of the PATH environment variable
   char path_env = getenv("PATH");
   int num_paths = 0;


   // Check if PATH environment variable exists
   if (path_env == NULL)
   {
       perror("error ");
       return NULL;
   }


   // Calculate the number of colons to determine the number of paths
   for (int i = 0; path_env[i]; i++)
   {
       if (path_env[i] == ':')
           num_paths++;
   }


   // Allocate memory for the array of paths
   char **paths = malloc(sizeof(char) * (num_paths + 2));
   if (paths == NULL)
   {
       perror("error ");
       return NULL;
   }


   char *token = strtok(path_env, ":");
   int index = 0;
   while (token != NULL)
   {
       paths[index] = token;
       index++;
       token = strtok(NULL, ":");
   }


   paths[index] = NULL;


   return paths;
}






#include "simple_shell.h"


/*
main - Entry point for the simple shell program
@argc: The argument count (unused)
@argv: The argument vector (unused)
@env: The environment variables
Return: Always 0 */


int main(int ac, char **av)
{
   char *line;
   char **args;
   int status;
   bool running = true;


   (void)ac;
   (void)av;


   while (running)
   {
       printf("$ ");
       line = read_input();


       if (line == NULL) {
           break;
       }


       args = tokenize(line);
       status = execute(args);
       free(line);
       free_array(args);


       if (status == -1)
       {
           running = false;
       }
   }


   return 0;
}










________________________________________________________________________________________________________________ TRY #2


functions.c

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>


#define MAX_LINE_LENGTH 1024
#define MAX_ARGS 64


// Function to read input from the user
char *read_input() {
   char *line = NULL;
   size_t bufsize = 0;
   getline(&line, &bufsize, stdin);
   return line;
}


// Function to tokenize the input line into arguments
char **tokenize(char *line) {
   char **args = (char **)malloc(MAX_ARGS * sizeof(char *));
   if (!args) {
       perror("malloc error");
       exit(EXIT_FAILURE);
   }


   char *token = strtok(line, " \t\n");
   int i = 0;
   while (token != NULL) {
       args[i] = token;
       i++;
       token = strtok(NULL, " \t\n");
   }
   args[i] = NULL;


   return args;
}


// Function to free the memory used by the argument array
void free_array(char **args) {
   free(args);
}


// Function to execute the command with arguments
int execute(char **args) {
   pid_t pid = fork();
   if (pid == 0) {
       // Child process
       if (execvp(args[0], args) == -1) {
           perror("execvp error");
           exit(EXIT_FAILURE);
       }
   } else if (pid > 0) {
       // Parent process
       int status;
       waitpid(pid, &status, 0);
       return WIFEXITED(status) ? WEXITSTATUS(status) : -1;
   } else {
       perror("fork error");
       exit(EXIT_FAILURE);
   }


   return 0;
}






 Main.c

int main(int argc, char **argv, char **env) {
   (void)argc;
   (void)argv;


   char *line;
   int status;
   bool running = true;


   while (running) {
       printf("$ ");
       line = read_input();


       if (line == NULL) {
           break;
       }


       if (strcmp(line, "exit\n") == 0) {
           running = false;
       } else {
           status = execute_command(line);
       }


       free(line);


       if (status == -1) {
           running = false;
       }
   }


   return 0;
}







Non-interactive.c

#include <stdio.h>
#include <stdlib.h>
#include "simple.h"


int main(int argc, char **argv, char **env) {
   // ... (rest of the main function remains the same)


   // Example of using the non-interactive function
   const char *command = "ls -l";
   int command_status = execute_command(command);
   printf("Command exited with status: %d\n", command_status);


   return 0;
}


int execute_command(const char *command) {
   char *line = strdup(command); // Duplicate the command string
   char **args = tokenize(line);


   if (args[0] != NULL) {
       int status = execute(args);
       free_array(args);
       free(line); // Free the duplicated command string
       return status;
   }
   free(line); // Free the duplicated command string
   return -1;
}










Simple.h

#ifndef SIMPLE_SHELL_H
#define SIMPLE_SHELL_H


#include <stdlib.h>
#include <stdio.h>
#include <fcntl.h>
#include <unistd.h>
#include <string.h>
#include <stdarg.h>
#include <sys/types.h>
#include <dirent.h>
#include <signal.h>
#include <sys/wait.h>
#include <sys/stat.h>
#include <stdbool.h>


char *read_input();
char **tokenize(char *line);
void free_array(char **args);
int execute(char **args);
void execute_command(char *command, char environment);
void prompt(void);
char *read_input(void);
char **tokenize(char *line);
void free_array(char **array);
int main(int argc, char argv, char *env);
void handle_non_interactive_mode(char *environment);
void free_array(char **array);
char get_paths(void);


#endif

—-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------






functions.c


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>


#define MAX_LINE_LENGTH 1024
#define MAX_ARGS 64


char *read_input()
{
  char *line = NULL;
  size_t bufsize = 0;
  getline(&line, &bufsize, stdin);
  return (line);
}


char **tokenize(char *line)
{
  char **args = (char **)malloc(MAX_ARGS * sizeof(char *));
  if (!args)
   {
      perror("malloc error");
      exit(EXIT_FAILURE);
   }


   char **tokens = NULL;
   char *token = strtok(line, " \t\n");
   int token_count = 0;


   while (token)
   {
       tokens = realloc(tokens, sizeof(char *) * (token_count + 1));
       tokens[token_count++] = strdup(token);
       token = strtok(NULL, " \t\n");
   }


   tokens = realloc(tokens, sizeof(char *) * (token_count + 1));
   tokens[token_count] = NULL;


   return (tokens);
}









Functions2.c

#include <stdio.h>
#include <stdlib.h>
#include "simple.h"
#include <string.h>


void execute_command(char *command, char *environment)
{
  char *line = strdup(command);
  char **args = tokenize(line);
  (void)environment;


  if (args[0] != NULL)
  {
      free_array(args);
      free(line);
  }


  free(line);
}


void free_array(char **args)
{
  free(args);
}


int execute(char **args)
{
  pid_t pid = fork();
  if (pid == 0)
  {
      if (execvp(args[0], args) == -1)
      {
          perror("execvp error");
          exit(EXIT_FAILURE);
      }
  }
  else if (pid > 0)
  {
      int status;
      waitpid(pid, &status, 0);
      return WIFEXITED(status) ? WEXITSTATUS(status) : -1;
  }
  else
  {
      perror("fork error");
      exit(EXIT_FAILURE);
  }
  return 0;
}


Main.c



#include "simple.h"
/**
* main - main function
* @argc: number of arguments
* @argv: arguments
* @env: double pointer to environment variable
*
* Return: 0
*/
int main(int argc, char **argv, char **env)
{
  (void)argc;
  (void)argv;
   int execute_command(char *line)
  char *line;
  int status;
  bool running = true;




  while (running)
  {
      printf("$ ");
      line = read_input();




      if (line == NULL)
      {
          break;
      }


      if (strcmp(line, "exit\n") == 0)
      {
          running = false;
      }
      else
      {
          status = execute_command(line);
      }




      free(line);


      if (status == -1)
      {
          running = false;
      }
  }
  return 0;
}




Simple.h

#include <stdio.h>
#include <fcntl.h>
#include <unistd.h>
#include <string.h>
#include <stdarg.h>
#include <sys/types.h>
#include <dirent.h>
#include <signal.h>
#include <sys/wait.h>
#include <sys/stat.h>
#include <stdbool.h>




char *read_input();
char **tokenize(char *line);
void free_array(char **args);
int execute(char **args);
void execute_command(char *command, char *environment);
void prompt(void);
char *read_input(void);
char **tokenize(char *line);
void free_array(char **array);
int main(int argc, char argv, char **env);
void handle_non_interactive_mode(char *environment);
void free_array(char **array);
char get_paths(void);




#endif



—--------------------------------------------------------------------------------------------------------------------------------------------


#include <stdio.h>
#include <stdlib.h>
#include "simple.h"
#include <string.h>
#include "function.h"


int execute_command(char *command, char *environment)
{ 
   int status = -1;
  char *line = strdup(command);
  char **args = tokenize(line);
  (void)environment;


  if (args[0] != NULL)
  {
      free_array(args);
      free(line);
  }
   return status;
}


int execute(char **args)
{
  pid_t pid = fork();
  if (pid == 0)
  {
      if (execvp(args[0], args) == -1)
      {
          perror("execvp error");
          exit(EXIT_FAILURE);
      }
  }
  else if (pid > 0)
  {
      int status;
      waitpid(pid, &status, 0);
      return WIFEXITED(status) ? WEXITSTATUS(status) : -1;
  }
  else
  {
      perror("fork error");
      exit(EXIT_FAILURE);
  }
  return 0;
}


void free_array(char **args)
{
  free(args);
}

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
#include "simple.h"
#include "function.h"


#define MAX_LINE_LENGTH 1024
#define MAX_ARGS 64


char *read_input()
{
   char *line = NULL;
   size_t bufsize = 0;
   getline(&line, &bufsize, stdin);
   return line;
}


char **tokenize(char *line)
{
   char **tokens = NULL; 
   char *token = strtok(line, " \t\n");
   int token_count = 0;


   while (token)
   {
       tokens = realloc(tokens, sizeof(char *) * (token_count + 1));
       tokens[token_count++] = strdup(token);
       token = strtok(NULL, " \t\n");
   }


   tokens = realloc(tokens, sizeof(char *) * (token_count + 1));
   tokens[token_count] = NULL;


   return tokens;
}




Main
#include "simple.h"
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <assert.h>
#include "function.h"
int main(int argc, char **argv, char **env)
{
   char *line = NULL; 
   int status;
   bool running = true;


   (void)argc;
   (void)argv;


   while (running)
   {
       printf("$ ");
       line = read_input();


       if (line == NULL)
       {
           break;
       }


       if (strcmp(line, "exit\n") == 0)
       {
           running = false;
       }
       else
       {
           status = execute_command(line, *env);
       }


       free(line);


       if (status == -1)
       {
           running = false;
       }
   }
   return 0;
}


























char **tokenize(char *line)
{
   char **tokens = NULL;
   char *token = strtok(line, " \t\n");
   int token_count = 0;


   while (token)
   {
       tokens = realloc(tokens, sizeof(char *) * (token_count + 1));
       tokens[token_count++] = strdup(token);
       token = strtok(NULL, " \t\n");
       tokens[token_count] = NULL;
   }
   free(tokens);
   return (tokens);
}

/**
* interactive_loop - loop for interactive mode
*/
void interactive_loop(void)
{
char *line = NULL;
   int status;
   bool running = true;


   while (running)
   {
       printf("$ ");
       line = read_input();


       if (line == NULL)
       {
           break;
       }


       if (strcmp(line, "exit\n") == 0)
       {
           running = false;
       }
       else
       {
           status = execute_command(line);
       }


       if (status == -1)
       {
           running = false;
       }
   }
   free(line);
}


int execute_command(char *command)
{  
   int status = -1;
   char *line = strdup(command);
   char **args = tokenize(line);


   if (args[0] != NULL)
   {
       status = execute(args);
       free(args);
       free(line);
   }
   return (status);
}

